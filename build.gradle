plugins {
    id 'java'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'maven-publish'
    id 'com.google.protobuf' version '0.8.13'
    id 'com.adarshr.test-logger' version '2.1.1'
    id "com.jfrog.bintray" version "1.8.5"
}

apply plugin: 'idea'

group 'de.nerden'

repositories {
    mavenCentral()
    jcenter()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = 'bintray_user'
    key = 'bintray_api_key'
    pkg {
        repo = 'generic'
        name = 'gradle-project'
        userOrg = 'bintray_user'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
    }
}

bintray {
    user = 'bintray_user'
    key = 'bintray_api_key'
    pkg {
        repo = 'generic'
        name = 'gradle-project'
        userOrg = 'bintray_user'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "birdayz"
            name "Johannes Bruederl"
            email "johannes.bruederl@gmail.com"
        }
    }

    scm {
        url "https://github.com/birdayz/kafka-streams-contrib"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'de.nerden'
            artifactId 'kafka-streams-contrib'
            version '0.2'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Kafka Streams Contrib')
                root.appendNode('name', 'kafka-streams-contrib')
                root.appendNode('url', 'https://github.com/birdayz/kafka-streams-contrib')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    publications = ['MyPublication']

    pkg {
        repo = 'oss-releases'
        name = 'kafka-streams-contrib'
        userOrg = 'birdayz'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/birdayz/kafka-streams-contrib.git'
        version {
            name = '0.2'
            desc = '0.2'
            released = new Date()
        }
    }

}


def kafkaStreamsVersion = "2.6.0"

dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'

    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: kafkaStreamsVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    testImplementation group: 'org.apache.kafka', name: 'kafka-streams-test-utils', version: kafkaStreamsVersion
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'
    testImplementation "com.google.truth:truth:1.1"

    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.13.0'
}

googleJavaFormat {
    toolVersion = '1.8'
    options style: 'GOOGLE'
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.14.0'
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

